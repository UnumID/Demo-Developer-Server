version: 2.1

orbs:
  aws-cli: circleci/aws-cli@0.1.22
  aws-eks: circleci/aws-eks@0.2.3
  kubernetes: circleci/kubernetes@0.4.0

jobs:
  lint:
    docker:
      - image: circleci/node:12.7.0
    steps:
      - checkout
      - restore_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}--{{ arch }}

      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}--{{ arch }}

      - run: yarn install

      - save_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}--{{ arch }}
          paths:
            - .cache/yarn

      - save_cache:
          key: node-v1-{{ checksum "package.json" }}--{{ arch }}
          paths:
            - node_modules

      - run: yarn lint

  test:
    docker:
      - image: circleci/node:12.7.0
        environment:
          TEST_DB_NAME: circle_test
          TEST_DB_PORT: '5432'
          TEST_DB_USER: postgres
          TEST_DB_HOST: localhost
      - image: circleci/postgres:9.6.5-alpine-ram
    steps:
      - checkout
      - restore_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}--{{ arch }}

      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}--{{ arch }}

      - run: yarn install

      - save_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}--{{ arch }}
          paths:
            - .cache/yarn

      - save_cache:
          key: node-v1-{{ checksum "package.json" }}--{{ arch }}
          paths:
            - node_modules

      - run:
          name: Jest Tests
          command: yarn test

  build-and-push-image:
    executor: aws-cli/default
    parameters:
      reg:
        type: string
        default: "248606629437.dkr.ecr.us-west-2.amazonaws.com"
      repo:
        type: string
    steps:
      - checkout
      - aws-cli/setup
      - setup_remote_docker
      - run:
          command: |
            echo Logging in to Amazon ECR...
            $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
            echo Building the Docker image...
            docker build -t ${CIRCLE_SHA1} .
            docker tag ${CIRCLE_SHA1} << parameters.reg >>/<< parameters.repo >>:dev-latest
            docker tag ${CIRCLE_SHA1} << parameters.reg >>/<< parameters.repo >>:"${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}"
            echo Pushing the Docker image...
            docker push << parameters.reg >>/<< parameters.repo >>:"${CIRCLE_BRANCH}-${CIRCLE_BUILD_NUM}"
            docker push << parameters.reg >>/<< parameters.repo >>:dev-latest
          name: Update container image


workflows:
  lint-and-test:
    jobs:
      - lint:
          filters:
            branches:
              ignore:
                - main
                - test-circleci
      - test:
          requires:
            - lint
          filters:
            branches:
              ignore:
                - main
                - test-circleci

  build-and-deploy:
    jobs:
      - lint
      - test:
          requires:
            - lint
      - build-and-push-image:
          requires:
            - test
          context: AWS-Dev
          repo: test-customer-app
          filters:
            branches:
              only:
                - main
                - test-circleci
